package dictionary;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

/** Vocab maintains both the trie and the hashtable dictionary to look up valid words, and significant data about those words **/
public class Vocab {
	
	
	/** root: stores the Trie **/
	private TreeSearchable root;
	
	/**dictionary: stores the Entries which contain information about each word **/
	private HashMap<String, Entry> dictionary;
	
	/**total: keeps track of the total number of words in the corpus **/
	private int total;
	
	
	/**Constructor
	 * 
	 */
	public Vocab (){
		root = new TrieNode('\0');
		dictionary = new HashMap<String, Entry>();
		total = 0;
	}
	
	
	/** @return the root of the tree, so Searchers can get to it easily **/
	public TreeSearchable getRoot(){
		return root;
	}
	
	/** getEntry returns the Entry for a given word
	 * 
	 * @param word, the String we want the Entry for
	 * @return the Entry for the word. null if the word doesn't exist in the dictionary.
	 */
	public Entry getEntry(String word){
		return dictionary.get(word);
	}
	
	
	/** addVocab builds the vocabulary stored in Vocab
	 * 
	 * @param filename, the name to a valid file with text
	 * @throws FileNotFoundException if the filename is invalid
	 * @throws IOException if the filereading encounters an IO error
	 */
	public void addVocab(String filename) throws FileNotFoundException, IOException{
		//prevWord keeps a running tally of the previous word, for the purposes of counting bigrams
		//String prevWord = null;
		
		BufferedReader input =  new BufferedReader(new FileReader(filename));
		//lines are read once at a time
			String line = input.readLine();
			String[] words;
			
			while (line != null){
				if (line.length()!=0){
					//Punctuation removed, everything to lowercase
					words = line.replaceAll("\\W", " ").replaceAll("[^a-zA-Z ]", "").toLowerCase().split("\\s+");
				
					//Update variables keeping track of corpus information
					total+= words.length;
					//if (words.length!=0){
					//	prevWord = words[words.length-1];
					//}
				
					//Add the words to the dictionary and the root
					for (int i= 0; i <words.length; i++ ){
						String newWord = words[i];
						//Either update an existing Entry
						if (dictionary.containsKey(newWord))
							dictionary.get(newWord).addUnigramCount();
						//Or add a new Entry alltogether
						else {
							Entry newEntry = new WordEntry(newWord);
							root.addWord(newEntry.getString());
							dictionary.put(newWord, newEntry);
						}
					
						//Adding bigram Probabilities
						if (i != 0){
						//	if (prevWord!=null)
						//		dictionary.get(newWord).addBigramCount(prevWord);
						//}
						dictionary.get(newWord).addBigramCount(words[i-1]);
					}
				}
				line = input.readLine();
			}
			//Once the entire dictionary has been consumed, relate the total value to all the Entries
			for (Entry i: dictionary.values()){
				i.setTotal(total);
			}
			input.close();
		}				


